package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"
	"strconv"
	"time"
	"webmane_go/graph/model"
)

// UpsertSong is the resolver for the upsertSong field.
func (r *mutationResolver) UpsertSong(ctx context.Context, input model.SongInput) (*model.Song, error) {
	// panic(fmt.Errorf("not implemented: UpsertSong - upsertSong"))
	id := input.ID
	var song model.Song
	song.Path = input.Path

	now := time.Now().String()
	song.LastUpdate = now

	n := len(r.Resolver.MusicStore)
	if n == 0 {
		r.Resolver.MusicStore = make(map[string]model.Song)
	}

	if id != nil {
		_, ok := r.Resolver.MusicStore[*id]
		if !ok {
			return nil, fmt.Errorf("not found")
		}
		r.Resolver.MusicStore[*id] = song
	} else {
		nid := strconv.Itoa(n + 1)
		song.ID = nid
		r.Resolver.MusicStore[nid] = song
	}
	return &song, nil
}

// Song is the resolver for the song field.
func (r *queryResolver) Song(ctx context.Context, id string) (*model.Song, error) {
	panic(fmt.Errorf("not implemented: Song - song"))
}

// Music is the resolver for the music field.
func (r *queryResolver) Music(ctx context.Context) ([]*model.Song, error) {
	panic(fmt.Errorf("not implemented: Music - music"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
