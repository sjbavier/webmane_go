// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"webmane_go/ent/music"
	"webmane_go/ent/playlist"
	"webmane_go/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaylistUpdate is the builder for updating Playlist entities.
type PlaylistUpdate struct {
	config
	hooks    []Hook
	mutation *PlaylistMutation
}

// Where appends a list predicates to the PlaylistUpdate builder.
func (pu *PlaylistUpdate) Where(ps ...predicate.Playlist) *PlaylistUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PlaylistUpdate) SetName(s string) *PlaylistUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PlaylistUpdate) SetNillableName(s *string) *PlaylistUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetLastUpdate sets the "last_update" field.
func (pu *PlaylistUpdate) SetLastUpdate(t time.Time) *PlaylistUpdate {
	pu.mutation.SetLastUpdate(t)
	return pu
}

// SetLastAccessed sets the "last_accessed" field.
func (pu *PlaylistUpdate) SetLastAccessed(t time.Time) *PlaylistUpdate {
	pu.mutation.SetLastAccessed(t)
	return pu
}

// SetNillableLastAccessed sets the "last_accessed" field if the given value is not nil.
func (pu *PlaylistUpdate) SetNillableLastAccessed(t *time.Time) *PlaylistUpdate {
	if t != nil {
		pu.SetLastAccessed(*t)
	}
	return pu
}

// ClearLastAccessed clears the value of the "last_accessed" field.
func (pu *PlaylistUpdate) ClearLastAccessed() *PlaylistUpdate {
	pu.mutation.ClearLastAccessed()
	return pu
}

// SetCoverArt sets the "cover_art" field.
func (pu *PlaylistUpdate) SetCoverArt(s string) *PlaylistUpdate {
	pu.mutation.SetCoverArt(s)
	return pu
}

// SetNillableCoverArt sets the "cover_art" field if the given value is not nil.
func (pu *PlaylistUpdate) SetNillableCoverArt(s *string) *PlaylistUpdate {
	if s != nil {
		pu.SetCoverArt(*s)
	}
	return pu
}

// ClearCoverArt clears the value of the "cover_art" field.
func (pu *PlaylistUpdate) ClearCoverArt() *PlaylistUpdate {
	pu.mutation.ClearCoverArt()
	return pu
}

// AddSongIDs adds the "songs" edge to the Music entity by IDs.
func (pu *PlaylistUpdate) AddSongIDs(ids ...int) *PlaylistUpdate {
	pu.mutation.AddSongIDs(ids...)
	return pu
}

// AddSongs adds the "songs" edges to the Music entity.
func (pu *PlaylistUpdate) AddSongs(m ...*Music) *PlaylistUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddSongIDs(ids...)
}

// Mutation returns the PlaylistMutation object of the builder.
func (pu *PlaylistUpdate) Mutation() *PlaylistMutation {
	return pu.mutation
}

// ClearSongs clears all "songs" edges to the Music entity.
func (pu *PlaylistUpdate) ClearSongs() *PlaylistUpdate {
	pu.mutation.ClearSongs()
	return pu
}

// RemoveSongIDs removes the "songs" edge to Music entities by IDs.
func (pu *PlaylistUpdate) RemoveSongIDs(ids ...int) *PlaylistUpdate {
	pu.mutation.RemoveSongIDs(ids...)
	return pu
}

// RemoveSongs removes "songs" edges to Music entities.
func (pu *PlaylistUpdate) RemoveSongs(m ...*Music) *PlaylistUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveSongIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlaylistUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlaylistUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlaylistUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlaylistUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PlaylistUpdate) defaults() {
	if _, ok := pu.mutation.LastUpdate(); !ok {
		v := playlist.UpdateDefaultLastUpdate()
		pu.mutation.SetLastUpdate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PlaylistUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := playlist.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Playlist.name": %w`, err)}
		}
	}
	return nil
}

func (pu *PlaylistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(playlist.Table, playlist.Columns, sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(playlist.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.LastUpdate(); ok {
		_spec.SetField(playlist.FieldLastUpdate, field.TypeTime, value)
	}
	if value, ok := pu.mutation.LastAccessed(); ok {
		_spec.SetField(playlist.FieldLastAccessed, field.TypeTime, value)
	}
	if pu.mutation.LastAccessedCleared() {
		_spec.ClearField(playlist.FieldLastAccessed, field.TypeTime)
	}
	if value, ok := pu.mutation.CoverArt(); ok {
		_spec.SetField(playlist.FieldCoverArt, field.TypeString, value)
	}
	if pu.mutation.CoverArtCleared() {
		_spec.ClearField(playlist.FieldCoverArt, field.TypeString)
	}
	if pu.mutation.SongsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlist.SongsTable,
			Columns: playlist.SongsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(music.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSongsIDs(); len(nodes) > 0 && !pu.mutation.SongsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlist.SongsTable,
			Columns: playlist.SongsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(music.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SongsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlist.SongsTable,
			Columns: playlist.SongsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(music.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlaylistUpdateOne is the builder for updating a single Playlist entity.
type PlaylistUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaylistMutation
}

// SetName sets the "name" field.
func (puo *PlaylistUpdateOne) SetName(s string) *PlaylistUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PlaylistUpdateOne) SetNillableName(s *string) *PlaylistUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetLastUpdate sets the "last_update" field.
func (puo *PlaylistUpdateOne) SetLastUpdate(t time.Time) *PlaylistUpdateOne {
	puo.mutation.SetLastUpdate(t)
	return puo
}

// SetLastAccessed sets the "last_accessed" field.
func (puo *PlaylistUpdateOne) SetLastAccessed(t time.Time) *PlaylistUpdateOne {
	puo.mutation.SetLastAccessed(t)
	return puo
}

// SetNillableLastAccessed sets the "last_accessed" field if the given value is not nil.
func (puo *PlaylistUpdateOne) SetNillableLastAccessed(t *time.Time) *PlaylistUpdateOne {
	if t != nil {
		puo.SetLastAccessed(*t)
	}
	return puo
}

// ClearLastAccessed clears the value of the "last_accessed" field.
func (puo *PlaylistUpdateOne) ClearLastAccessed() *PlaylistUpdateOne {
	puo.mutation.ClearLastAccessed()
	return puo
}

// SetCoverArt sets the "cover_art" field.
func (puo *PlaylistUpdateOne) SetCoverArt(s string) *PlaylistUpdateOne {
	puo.mutation.SetCoverArt(s)
	return puo
}

// SetNillableCoverArt sets the "cover_art" field if the given value is not nil.
func (puo *PlaylistUpdateOne) SetNillableCoverArt(s *string) *PlaylistUpdateOne {
	if s != nil {
		puo.SetCoverArt(*s)
	}
	return puo
}

// ClearCoverArt clears the value of the "cover_art" field.
func (puo *PlaylistUpdateOne) ClearCoverArt() *PlaylistUpdateOne {
	puo.mutation.ClearCoverArt()
	return puo
}

// AddSongIDs adds the "songs" edge to the Music entity by IDs.
func (puo *PlaylistUpdateOne) AddSongIDs(ids ...int) *PlaylistUpdateOne {
	puo.mutation.AddSongIDs(ids...)
	return puo
}

// AddSongs adds the "songs" edges to the Music entity.
func (puo *PlaylistUpdateOne) AddSongs(m ...*Music) *PlaylistUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddSongIDs(ids...)
}

// Mutation returns the PlaylistMutation object of the builder.
func (puo *PlaylistUpdateOne) Mutation() *PlaylistMutation {
	return puo.mutation
}

// ClearSongs clears all "songs" edges to the Music entity.
func (puo *PlaylistUpdateOne) ClearSongs() *PlaylistUpdateOne {
	puo.mutation.ClearSongs()
	return puo
}

// RemoveSongIDs removes the "songs" edge to Music entities by IDs.
func (puo *PlaylistUpdateOne) RemoveSongIDs(ids ...int) *PlaylistUpdateOne {
	puo.mutation.RemoveSongIDs(ids...)
	return puo
}

// RemoveSongs removes "songs" edges to Music entities.
func (puo *PlaylistUpdateOne) RemoveSongs(m ...*Music) *PlaylistUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveSongIDs(ids...)
}

// Where appends a list predicates to the PlaylistUpdate builder.
func (puo *PlaylistUpdateOne) Where(ps ...predicate.Playlist) *PlaylistUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlaylistUpdateOne) Select(field string, fields ...string) *PlaylistUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Playlist entity.
func (puo *PlaylistUpdateOne) Save(ctx context.Context) (*Playlist, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlaylistUpdateOne) SaveX(ctx context.Context) *Playlist {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlaylistUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlaylistUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PlaylistUpdateOne) defaults() {
	if _, ok := puo.mutation.LastUpdate(); !ok {
		v := playlist.UpdateDefaultLastUpdate()
		puo.mutation.SetLastUpdate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PlaylistUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := playlist.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Playlist.name": %w`, err)}
		}
	}
	return nil
}

func (puo *PlaylistUpdateOne) sqlSave(ctx context.Context) (_node *Playlist, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(playlist.Table, playlist.Columns, sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Playlist.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playlist.FieldID)
		for _, f := range fields {
			if !playlist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playlist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(playlist.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.LastUpdate(); ok {
		_spec.SetField(playlist.FieldLastUpdate, field.TypeTime, value)
	}
	if value, ok := puo.mutation.LastAccessed(); ok {
		_spec.SetField(playlist.FieldLastAccessed, field.TypeTime, value)
	}
	if puo.mutation.LastAccessedCleared() {
		_spec.ClearField(playlist.FieldLastAccessed, field.TypeTime)
	}
	if value, ok := puo.mutation.CoverArt(); ok {
		_spec.SetField(playlist.FieldCoverArt, field.TypeString, value)
	}
	if puo.mutation.CoverArtCleared() {
		_spec.ClearField(playlist.FieldCoverArt, field.TypeString)
	}
	if puo.mutation.SongsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlist.SongsTable,
			Columns: playlist.SongsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(music.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSongsIDs(); len(nodes) > 0 && !puo.mutation.SongsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlist.SongsTable,
			Columns: playlist.SongsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(music.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SongsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlist.SongsTable,
			Columns: playlist.SongsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(music.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Playlist{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
