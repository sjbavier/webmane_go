// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"webmane_go/ent/music"
	"webmane_go/ent/playlist"
	"webmane_go/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MusicUpdate is the builder for updating Music entities.
type MusicUpdate struct {
	config
	hooks    []Hook
	mutation *MusicMutation
}

// Where appends a list predicates to the MusicUpdate builder.
func (mu *MusicUpdate) Where(ps ...predicate.Music) *MusicUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetPath sets the "path" field.
func (mu *MusicUpdate) SetPath(s string) *MusicUpdate {
	mu.mutation.SetPath(s)
	return mu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (mu *MusicUpdate) SetNillablePath(s *string) *MusicUpdate {
	if s != nil {
		mu.SetPath(*s)
	}
	return mu
}

// SetLastUpdate sets the "last_update" field.
func (mu *MusicUpdate) SetLastUpdate(t time.Time) *MusicUpdate {
	mu.mutation.SetLastUpdate(t)
	return mu
}

// SetTitle sets the "title" field.
func (mu *MusicUpdate) SetTitle(s string) *MusicUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mu *MusicUpdate) SetNillableTitle(s *string) *MusicUpdate {
	if s != nil {
		mu.SetTitle(*s)
	}
	return mu
}

// ClearTitle clears the value of the "title" field.
func (mu *MusicUpdate) ClearTitle() *MusicUpdate {
	mu.mutation.ClearTitle()
	return mu
}

// SetArtist sets the "artist" field.
func (mu *MusicUpdate) SetArtist(s string) *MusicUpdate {
	mu.mutation.SetArtist(s)
	return mu
}

// SetNillableArtist sets the "artist" field if the given value is not nil.
func (mu *MusicUpdate) SetNillableArtist(s *string) *MusicUpdate {
	if s != nil {
		mu.SetArtist(*s)
	}
	return mu
}

// ClearArtist clears the value of the "artist" field.
func (mu *MusicUpdate) ClearArtist() *MusicUpdate {
	mu.mutation.ClearArtist()
	return mu
}

// SetAlbum sets the "album" field.
func (mu *MusicUpdate) SetAlbum(s string) *MusicUpdate {
	mu.mutation.SetAlbum(s)
	return mu
}

// SetNillableAlbum sets the "album" field if the given value is not nil.
func (mu *MusicUpdate) SetNillableAlbum(s *string) *MusicUpdate {
	if s != nil {
		mu.SetAlbum(*s)
	}
	return mu
}

// ClearAlbum clears the value of the "album" field.
func (mu *MusicUpdate) ClearAlbum() *MusicUpdate {
	mu.mutation.ClearAlbum()
	return mu
}

// SetGenre sets the "genre" field.
func (mu *MusicUpdate) SetGenre(s string) *MusicUpdate {
	mu.mutation.SetGenre(s)
	return mu
}

// SetNillableGenre sets the "genre" field if the given value is not nil.
func (mu *MusicUpdate) SetNillableGenre(s *string) *MusicUpdate {
	if s != nil {
		mu.SetGenre(*s)
	}
	return mu
}

// ClearGenre clears the value of the "genre" field.
func (mu *MusicUpdate) ClearGenre() *MusicUpdate {
	mu.mutation.ClearGenre()
	return mu
}

// SetReleaseYear sets the "release_year" field.
func (mu *MusicUpdate) SetReleaseYear(s string) *MusicUpdate {
	mu.mutation.SetReleaseYear(s)
	return mu
}

// SetNillableReleaseYear sets the "release_year" field if the given value is not nil.
func (mu *MusicUpdate) SetNillableReleaseYear(s *string) *MusicUpdate {
	if s != nil {
		mu.SetReleaseYear(*s)
	}
	return mu
}

// ClearReleaseYear clears the value of the "release_year" field.
func (mu *MusicUpdate) ClearReleaseYear() *MusicUpdate {
	mu.mutation.ClearReleaseYear()
	return mu
}

// SetCoverArt sets the "cover_art" field.
func (mu *MusicUpdate) SetCoverArt(s string) *MusicUpdate {
	mu.mutation.SetCoverArt(s)
	return mu
}

// SetNillableCoverArt sets the "cover_art" field if the given value is not nil.
func (mu *MusicUpdate) SetNillableCoverArt(s *string) *MusicUpdate {
	if s != nil {
		mu.SetCoverArt(*s)
	}
	return mu
}

// ClearCoverArt clears the value of the "cover_art" field.
func (mu *MusicUpdate) ClearCoverArt() *MusicUpdate {
	mu.mutation.ClearCoverArt()
	return mu
}

// AddPlaylistIDs adds the "playlists" edge to the Playlist entity by IDs.
func (mu *MusicUpdate) AddPlaylistIDs(ids ...int) *MusicUpdate {
	mu.mutation.AddPlaylistIDs(ids...)
	return mu
}

// AddPlaylists adds the "playlists" edges to the Playlist entity.
func (mu *MusicUpdate) AddPlaylists(p ...*Playlist) *MusicUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.AddPlaylistIDs(ids...)
}

// Mutation returns the MusicMutation object of the builder.
func (mu *MusicUpdate) Mutation() *MusicMutation {
	return mu.mutation
}

// ClearPlaylists clears all "playlists" edges to the Playlist entity.
func (mu *MusicUpdate) ClearPlaylists() *MusicUpdate {
	mu.mutation.ClearPlaylists()
	return mu
}

// RemovePlaylistIDs removes the "playlists" edge to Playlist entities by IDs.
func (mu *MusicUpdate) RemovePlaylistIDs(ids ...int) *MusicUpdate {
	mu.mutation.RemovePlaylistIDs(ids...)
	return mu
}

// RemovePlaylists removes "playlists" edges to Playlist entities.
func (mu *MusicUpdate) RemovePlaylists(p ...*Playlist) *MusicUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.RemovePlaylistIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MusicUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MusicUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MusicUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MusicUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MusicUpdate) defaults() {
	if _, ok := mu.mutation.LastUpdate(); !ok {
		v := music.UpdateDefaultLastUpdate()
		mu.mutation.SetLastUpdate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MusicUpdate) check() error {
	if v, ok := mu.mutation.Path(); ok {
		if err := music.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Music.path": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Title(); ok {
		if err := music.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Music.title": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Artist(); ok {
		if err := music.ArtistValidator(v); err != nil {
			return &ValidationError{Name: "artist", err: fmt.Errorf(`ent: validator failed for field "Music.artist": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Album(); ok {
		if err := music.AlbumValidator(v); err != nil {
			return &ValidationError{Name: "album", err: fmt.Errorf(`ent: validator failed for field "Music.album": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Genre(); ok {
		if err := music.GenreValidator(v); err != nil {
			return &ValidationError{Name: "genre", err: fmt.Errorf(`ent: validator failed for field "Music.genre": %w`, err)}
		}
	}
	if v, ok := mu.mutation.ReleaseYear(); ok {
		if err := music.ReleaseYearValidator(v); err != nil {
			return &ValidationError{Name: "release_year", err: fmt.Errorf(`ent: validator failed for field "Music.release_year": %w`, err)}
		}
	}
	return nil
}

func (mu *MusicUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(music.Table, music.Columns, sqlgraph.NewFieldSpec(music.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Path(); ok {
		_spec.SetField(music.FieldPath, field.TypeString, value)
	}
	if value, ok := mu.mutation.LastUpdate(); ok {
		_spec.SetField(music.FieldLastUpdate, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.SetField(music.FieldTitle, field.TypeString, value)
	}
	if mu.mutation.TitleCleared() {
		_spec.ClearField(music.FieldTitle, field.TypeString)
	}
	if value, ok := mu.mutation.Artist(); ok {
		_spec.SetField(music.FieldArtist, field.TypeString, value)
	}
	if mu.mutation.ArtistCleared() {
		_spec.ClearField(music.FieldArtist, field.TypeString)
	}
	if value, ok := mu.mutation.Album(); ok {
		_spec.SetField(music.FieldAlbum, field.TypeString, value)
	}
	if mu.mutation.AlbumCleared() {
		_spec.ClearField(music.FieldAlbum, field.TypeString)
	}
	if value, ok := mu.mutation.Genre(); ok {
		_spec.SetField(music.FieldGenre, field.TypeString, value)
	}
	if mu.mutation.GenreCleared() {
		_spec.ClearField(music.FieldGenre, field.TypeString)
	}
	if value, ok := mu.mutation.ReleaseYear(); ok {
		_spec.SetField(music.FieldReleaseYear, field.TypeString, value)
	}
	if mu.mutation.ReleaseYearCleared() {
		_spec.ClearField(music.FieldReleaseYear, field.TypeString)
	}
	if value, ok := mu.mutation.CoverArt(); ok {
		_spec.SetField(music.FieldCoverArt, field.TypeString, value)
	}
	if mu.mutation.CoverArtCleared() {
		_spec.ClearField(music.FieldCoverArt, field.TypeString)
	}
	if mu.mutation.PlaylistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   music.PlaylistsTable,
			Columns: music.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedPlaylistsIDs(); len(nodes) > 0 && !mu.mutation.PlaylistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   music.PlaylistsTable,
			Columns: music.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.PlaylistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   music.PlaylistsTable,
			Columns: music.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{music.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MusicUpdateOne is the builder for updating a single Music entity.
type MusicUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MusicMutation
}

// SetPath sets the "path" field.
func (muo *MusicUpdateOne) SetPath(s string) *MusicUpdateOne {
	muo.mutation.SetPath(s)
	return muo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (muo *MusicUpdateOne) SetNillablePath(s *string) *MusicUpdateOne {
	if s != nil {
		muo.SetPath(*s)
	}
	return muo
}

// SetLastUpdate sets the "last_update" field.
func (muo *MusicUpdateOne) SetLastUpdate(t time.Time) *MusicUpdateOne {
	muo.mutation.SetLastUpdate(t)
	return muo
}

// SetTitle sets the "title" field.
func (muo *MusicUpdateOne) SetTitle(s string) *MusicUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (muo *MusicUpdateOne) SetNillableTitle(s *string) *MusicUpdateOne {
	if s != nil {
		muo.SetTitle(*s)
	}
	return muo
}

// ClearTitle clears the value of the "title" field.
func (muo *MusicUpdateOne) ClearTitle() *MusicUpdateOne {
	muo.mutation.ClearTitle()
	return muo
}

// SetArtist sets the "artist" field.
func (muo *MusicUpdateOne) SetArtist(s string) *MusicUpdateOne {
	muo.mutation.SetArtist(s)
	return muo
}

// SetNillableArtist sets the "artist" field if the given value is not nil.
func (muo *MusicUpdateOne) SetNillableArtist(s *string) *MusicUpdateOne {
	if s != nil {
		muo.SetArtist(*s)
	}
	return muo
}

// ClearArtist clears the value of the "artist" field.
func (muo *MusicUpdateOne) ClearArtist() *MusicUpdateOne {
	muo.mutation.ClearArtist()
	return muo
}

// SetAlbum sets the "album" field.
func (muo *MusicUpdateOne) SetAlbum(s string) *MusicUpdateOne {
	muo.mutation.SetAlbum(s)
	return muo
}

// SetNillableAlbum sets the "album" field if the given value is not nil.
func (muo *MusicUpdateOne) SetNillableAlbum(s *string) *MusicUpdateOne {
	if s != nil {
		muo.SetAlbum(*s)
	}
	return muo
}

// ClearAlbum clears the value of the "album" field.
func (muo *MusicUpdateOne) ClearAlbum() *MusicUpdateOne {
	muo.mutation.ClearAlbum()
	return muo
}

// SetGenre sets the "genre" field.
func (muo *MusicUpdateOne) SetGenre(s string) *MusicUpdateOne {
	muo.mutation.SetGenre(s)
	return muo
}

// SetNillableGenre sets the "genre" field if the given value is not nil.
func (muo *MusicUpdateOne) SetNillableGenre(s *string) *MusicUpdateOne {
	if s != nil {
		muo.SetGenre(*s)
	}
	return muo
}

// ClearGenre clears the value of the "genre" field.
func (muo *MusicUpdateOne) ClearGenre() *MusicUpdateOne {
	muo.mutation.ClearGenre()
	return muo
}

// SetReleaseYear sets the "release_year" field.
func (muo *MusicUpdateOne) SetReleaseYear(s string) *MusicUpdateOne {
	muo.mutation.SetReleaseYear(s)
	return muo
}

// SetNillableReleaseYear sets the "release_year" field if the given value is not nil.
func (muo *MusicUpdateOne) SetNillableReleaseYear(s *string) *MusicUpdateOne {
	if s != nil {
		muo.SetReleaseYear(*s)
	}
	return muo
}

// ClearReleaseYear clears the value of the "release_year" field.
func (muo *MusicUpdateOne) ClearReleaseYear() *MusicUpdateOne {
	muo.mutation.ClearReleaseYear()
	return muo
}

// SetCoverArt sets the "cover_art" field.
func (muo *MusicUpdateOne) SetCoverArt(s string) *MusicUpdateOne {
	muo.mutation.SetCoverArt(s)
	return muo
}

// SetNillableCoverArt sets the "cover_art" field if the given value is not nil.
func (muo *MusicUpdateOne) SetNillableCoverArt(s *string) *MusicUpdateOne {
	if s != nil {
		muo.SetCoverArt(*s)
	}
	return muo
}

// ClearCoverArt clears the value of the "cover_art" field.
func (muo *MusicUpdateOne) ClearCoverArt() *MusicUpdateOne {
	muo.mutation.ClearCoverArt()
	return muo
}

// AddPlaylistIDs adds the "playlists" edge to the Playlist entity by IDs.
func (muo *MusicUpdateOne) AddPlaylistIDs(ids ...int) *MusicUpdateOne {
	muo.mutation.AddPlaylistIDs(ids...)
	return muo
}

// AddPlaylists adds the "playlists" edges to the Playlist entity.
func (muo *MusicUpdateOne) AddPlaylists(p ...*Playlist) *MusicUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.AddPlaylistIDs(ids...)
}

// Mutation returns the MusicMutation object of the builder.
func (muo *MusicUpdateOne) Mutation() *MusicMutation {
	return muo.mutation
}

// ClearPlaylists clears all "playlists" edges to the Playlist entity.
func (muo *MusicUpdateOne) ClearPlaylists() *MusicUpdateOne {
	muo.mutation.ClearPlaylists()
	return muo
}

// RemovePlaylistIDs removes the "playlists" edge to Playlist entities by IDs.
func (muo *MusicUpdateOne) RemovePlaylistIDs(ids ...int) *MusicUpdateOne {
	muo.mutation.RemovePlaylistIDs(ids...)
	return muo
}

// RemovePlaylists removes "playlists" edges to Playlist entities.
func (muo *MusicUpdateOne) RemovePlaylists(p ...*Playlist) *MusicUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.RemovePlaylistIDs(ids...)
}

// Where appends a list predicates to the MusicUpdate builder.
func (muo *MusicUpdateOne) Where(ps ...predicate.Music) *MusicUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MusicUpdateOne) Select(field string, fields ...string) *MusicUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Music entity.
func (muo *MusicUpdateOne) Save(ctx context.Context) (*Music, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MusicUpdateOne) SaveX(ctx context.Context) *Music {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MusicUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MusicUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MusicUpdateOne) defaults() {
	if _, ok := muo.mutation.LastUpdate(); !ok {
		v := music.UpdateDefaultLastUpdate()
		muo.mutation.SetLastUpdate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MusicUpdateOne) check() error {
	if v, ok := muo.mutation.Path(); ok {
		if err := music.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Music.path": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Title(); ok {
		if err := music.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Music.title": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Artist(); ok {
		if err := music.ArtistValidator(v); err != nil {
			return &ValidationError{Name: "artist", err: fmt.Errorf(`ent: validator failed for field "Music.artist": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Album(); ok {
		if err := music.AlbumValidator(v); err != nil {
			return &ValidationError{Name: "album", err: fmt.Errorf(`ent: validator failed for field "Music.album": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Genre(); ok {
		if err := music.GenreValidator(v); err != nil {
			return &ValidationError{Name: "genre", err: fmt.Errorf(`ent: validator failed for field "Music.genre": %w`, err)}
		}
	}
	if v, ok := muo.mutation.ReleaseYear(); ok {
		if err := music.ReleaseYearValidator(v); err != nil {
			return &ValidationError{Name: "release_year", err: fmt.Errorf(`ent: validator failed for field "Music.release_year": %w`, err)}
		}
	}
	return nil
}

func (muo *MusicUpdateOne) sqlSave(ctx context.Context) (_node *Music, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(music.Table, music.Columns, sqlgraph.NewFieldSpec(music.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Music.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, music.FieldID)
		for _, f := range fields {
			if !music.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != music.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Path(); ok {
		_spec.SetField(music.FieldPath, field.TypeString, value)
	}
	if value, ok := muo.mutation.LastUpdate(); ok {
		_spec.SetField(music.FieldLastUpdate, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.SetField(music.FieldTitle, field.TypeString, value)
	}
	if muo.mutation.TitleCleared() {
		_spec.ClearField(music.FieldTitle, field.TypeString)
	}
	if value, ok := muo.mutation.Artist(); ok {
		_spec.SetField(music.FieldArtist, field.TypeString, value)
	}
	if muo.mutation.ArtistCleared() {
		_spec.ClearField(music.FieldArtist, field.TypeString)
	}
	if value, ok := muo.mutation.Album(); ok {
		_spec.SetField(music.FieldAlbum, field.TypeString, value)
	}
	if muo.mutation.AlbumCleared() {
		_spec.ClearField(music.FieldAlbum, field.TypeString)
	}
	if value, ok := muo.mutation.Genre(); ok {
		_spec.SetField(music.FieldGenre, field.TypeString, value)
	}
	if muo.mutation.GenreCleared() {
		_spec.ClearField(music.FieldGenre, field.TypeString)
	}
	if value, ok := muo.mutation.ReleaseYear(); ok {
		_spec.SetField(music.FieldReleaseYear, field.TypeString, value)
	}
	if muo.mutation.ReleaseYearCleared() {
		_spec.ClearField(music.FieldReleaseYear, field.TypeString)
	}
	if value, ok := muo.mutation.CoverArt(); ok {
		_spec.SetField(music.FieldCoverArt, field.TypeString, value)
	}
	if muo.mutation.CoverArtCleared() {
		_spec.ClearField(music.FieldCoverArt, field.TypeString)
	}
	if muo.mutation.PlaylistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   music.PlaylistsTable,
			Columns: music.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedPlaylistsIDs(); len(nodes) > 0 && !muo.mutation.PlaylistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   music.PlaylistsTable,
			Columns: music.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.PlaylistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   music.PlaylistsTable,
			Columns: music.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Music{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{music.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
