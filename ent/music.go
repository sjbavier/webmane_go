// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"webmane_go/ent/music"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Music is the model entity for the Music schema.
type Music struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// LastUpdate holds the value of the "last_update" field.
	LastUpdate time.Time `json:"last_update,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Artist holds the value of the "artist" field.
	Artist string `json:"artist,omitempty"`
	// Album holds the value of the "album" field.
	Album string `json:"album,omitempty"`
	// Genre holds the value of the "genre" field.
	Genre string `json:"genre,omitempty"`
	// ReleaseYear holds the value of the "release_year" field.
	ReleaseYear string `json:"release_year,omitempty"`
	// CoverArt holds the value of the "cover_art" field.
	CoverArt     string `json:"cover_art,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Music) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case music.FieldID:
			values[i] = new(sql.NullInt64)
		case music.FieldPath, music.FieldTitle, music.FieldArtist, music.FieldAlbum, music.FieldGenre, music.FieldReleaseYear, music.FieldCoverArt:
			values[i] = new(sql.NullString)
		case music.FieldLastUpdate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Music fields.
func (m *Music) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case music.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case music.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				m.Path = value.String
			}
		case music.FieldLastUpdate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_update", values[i])
			} else if value.Valid {
				m.LastUpdate = value.Time
			}
		case music.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				m.Title = value.String
			}
		case music.FieldArtist:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field artist", values[i])
			} else if value.Valid {
				m.Artist = value.String
			}
		case music.FieldAlbum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field album", values[i])
			} else if value.Valid {
				m.Album = value.String
			}
		case music.FieldGenre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field genre", values[i])
			} else if value.Valid {
				m.Genre = value.String
			}
		case music.FieldReleaseYear:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field release_year", values[i])
			} else if value.Valid {
				m.ReleaseYear = value.String
			}
		case music.FieldCoverArt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover_art", values[i])
			} else if value.Valid {
				m.CoverArt = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Music.
// This includes values selected through modifiers, order, etc.
func (m *Music) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// Update returns a builder for updating this Music.
// Note that you need to call Music.Unwrap() before calling this method if this Music
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Music) Update() *MusicUpdateOne {
	return NewMusicClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Music entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Music) Unwrap() *Music {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Music is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Music) String() string {
	var builder strings.Builder
	builder.WriteString("Music(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("path=")
	builder.WriteString(m.Path)
	builder.WriteString(", ")
	builder.WriteString("last_update=")
	builder.WriteString(m.LastUpdate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(m.Title)
	builder.WriteString(", ")
	builder.WriteString("artist=")
	builder.WriteString(m.Artist)
	builder.WriteString(", ")
	builder.WriteString("album=")
	builder.WriteString(m.Album)
	builder.WriteString(", ")
	builder.WriteString("genre=")
	builder.WriteString(m.Genre)
	builder.WriteString(", ")
	builder.WriteString("release_year=")
	builder.WriteString(m.ReleaseYear)
	builder.WriteString(", ")
	builder.WriteString("cover_art=")
	builder.WriteString(m.CoverArt)
	builder.WriteByte(')')
	return builder.String()
}

// Musics is a parsable slice of Music.
type Musics []*Music
