// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
	"webmane_go/ent/music"
	"webmane_go/ent/playlist"
	"webmane_go/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	musicFields := schema.Music{}.Fields()
	_ = musicFields
	// musicDescPath is the schema descriptor for path field.
	musicDescPath := musicFields[0].Descriptor()
	// music.PathValidator is a validator for the "path" field. It is called by the builders before save.
	music.PathValidator = func() func(string) error {
		validators := musicDescPath.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_path string) error {
			for _, fn := range fns {
				if err := fn(_path); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// musicDescLastUpdate is the schema descriptor for last_update field.
	musicDescLastUpdate := musicFields[1].Descriptor()
	// music.DefaultLastUpdate holds the default value on creation for the last_update field.
	music.DefaultLastUpdate = musicDescLastUpdate.Default.(func() time.Time)
	// music.UpdateDefaultLastUpdate holds the default value on update for the last_update field.
	music.UpdateDefaultLastUpdate = musicDescLastUpdate.UpdateDefault.(func() time.Time)
	// musicDescTitle is the schema descriptor for title field.
	musicDescTitle := musicFields[2].Descriptor()
	// music.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	music.TitleValidator = musicDescTitle.Validators[0].(func(string) error)
	// musicDescArtist is the schema descriptor for artist field.
	musicDescArtist := musicFields[3].Descriptor()
	// music.ArtistValidator is a validator for the "artist" field. It is called by the builders before save.
	music.ArtistValidator = musicDescArtist.Validators[0].(func(string) error)
	// musicDescAlbum is the schema descriptor for album field.
	musicDescAlbum := musicFields[4].Descriptor()
	// music.AlbumValidator is a validator for the "album" field. It is called by the builders before save.
	music.AlbumValidator = musicDescAlbum.Validators[0].(func(string) error)
	// musicDescGenre is the schema descriptor for genre field.
	musicDescGenre := musicFields[5].Descriptor()
	// music.GenreValidator is a validator for the "genre" field. It is called by the builders before save.
	music.GenreValidator = musicDescGenre.Validators[0].(func(string) error)
	// musicDescReleaseYear is the schema descriptor for release_year field.
	musicDescReleaseYear := musicFields[6].Descriptor()
	// music.ReleaseYearValidator is a validator for the "release_year" field. It is called by the builders before save.
	music.ReleaseYearValidator = musicDescReleaseYear.Validators[0].(func(string) error)
	playlistFields := schema.Playlist{}.Fields()
	_ = playlistFields
	// playlistDescName is the schema descriptor for name field.
	playlistDescName := playlistFields[0].Descriptor()
	// playlist.NameValidator is a validator for the "name" field. It is called by the builders before save.
	playlist.NameValidator = func() func(string) error {
		validators := playlistDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// playlistDescLastUpdate is the schema descriptor for last_update field.
	playlistDescLastUpdate := playlistFields[1].Descriptor()
	// playlist.DefaultLastUpdate holds the default value on creation for the last_update field.
	playlist.DefaultLastUpdate = playlistDescLastUpdate.Default.(func() time.Time)
	// playlist.UpdateDefaultLastUpdate holds the default value on update for the last_update field.
	playlist.UpdateDefaultLastUpdate = playlistDescLastUpdate.UpdateDefault.(func() time.Time)
}
